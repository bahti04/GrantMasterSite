<q>Какой метод используется для вставки элемента в определенную позицию вектора?
<va>insert()
<v>push_back()
<v>emplace_back()
<v>add()

<q>Что делает метод emplace_back() в контейнере vector?
<va>Создает элемент в конце вектора без копирования или перемещения.
<v>Удаляет элемент из конца вектора.
<v>Заменяет последний элемент вектора.
<v>Добавляет элемент в начало вектора.

<q>Какое значение возвращает метод capacity() в векторе?
<va>Количество элементов, которое может содержать вектор без перераспределения памяти.
<v>Текущее количество элементов в векторе.
<v>Максимальное количество элементов, которое может содержать вектор.
<v>Количество элементов, которое может быть добавлено в вектор.

<q>Что такое итератор в контексте контейнеров в C++?
<va>Объект, который указывает на элемент контейнера и позволяет проходить по элементам контейнера.
<v>Переменная, хранящая количество элементов в контейнере.
<v>Метод, который используется для сортировки элементов контейнера.
<v>Функция, которая возвращает размер контейнера.

<q>Какой метод возвращает итератор на первый элемент вектора?
<va>begin()
<v>front()
<v>first()
<v>start()

<q>Какой метод возвращает итератор на элемент, следующий за последним элементом вектора?
<va>end()
<v>back()
<v>last()
<v>finish()

<q>Какой метод возвращает ссылку на первый элемент вектора?
<va>front()
<v>begin()
<v>first()
<v>start()

<q>Какой метод возвращает ссылку на последний элемент вектора?
<va>back()
<v>end()
<v>last()
<v>finish()

<q>Что такое рендеринг вектора?
<va>Процесс перераспределения памяти вектора для увеличения его емкости.
<v>Процесс удаления элементов из вектора.
<v>Процесс сортировки элементов вектора.
<v>Процесс преобразования вектора в строку.

<q>Что происходит, если вектору требуется больше памяти, чем его текущая емкость?
<va>Вектор автоматически увеличивает свою емкость путем выделения нового блока памяти.
<v>Программа завершает выполнение с ошибкой.
<v>Элементы вектора удаляются для освобождения памяти.
<v>Память перераспределяется для всех контейнеров в программе.

<q>Что такое set в C++?
<va>Контейнер, который хранит уникальные элементы в отсортированном порядке.
<v>Контейнер, который хранит пары ключ-значение.
<v>Контейнер, который хранит элементы в порядке их добавления.
<v>Контейнер, который позволяет дублировать элементы.

<q>Какая структура данных лежит в основе std::set?
<va>Красно-черное дерево
<v>Хеш-таблица
<v>Связанный список
<v>Двоичное дерево поиска

<q>Какое время выполнения имеют операции вставки, удаления и поиска элемента в std::set?
<va>O(log n)
<v>O(1)
<v>O(n)
<v>O(n log n)

<q>Что делает метод lower_bound() в std::set?
<va>Возвращает итератор на первый элемент, не меньший заданного значения.
<v>Возвращает итератор на первый элемент, больший заданного значения.
<v>Возвращает итератор на последний элемент, меньший заданного значения.
<v>Возвращает итератор на последний элемент, не меньший заданного значения.

<q>Что делает метод upper_bound() в std::set?
<va>Возвращает итератор на первый элемент, больший заданного значения.
<v>Возвращает итератор на первый элемент, не меньший заданного значения.
<v>Возвращает итератор на последний элемент, меньший заданного значения.
<v>Возвращает итератор на последний элемент, не меньший заданного значения.

<q>Что делает метод equal_range() в std::set?
<va>Возвращает пару итераторов, указывающих на границы диапазона элементов, равных заданному значению.
<v>Возвращает итератор на первый элемент, равный заданному значению.
<v>Возвращает итератор на последний элемент, равный заданному значению.
<v>Удаляет все элементы, равные заданному значению.

<q>Какая функция используется для поиска элемента в std::set?
<va>find()
<v>search()
<v>locate()
<v>get()

<q>Что произойдет, если попытаться добавить в std::set элемент, который уже существует?
<va>Элемент не будет добавлен.
<v>Элемент заменит существующий.
<v>Будет выброшено исключение.
<v>Произойдет ошибка компиляции.

<q>Что делает метод emplace() в std::set?
<va>Вставляет элемент, создавая его на месте, без копирования или перемещения.
<v>Удаляет элемент из множества.
<v>Возвращает итератор на элемент множества.
<v>Очищает множество.

<q>Какой метод используется для получения количества элементов в std::set?
<va>size()
<v>count()
<v>length()
<v>capacity()

<q>Что делает метод clear() в std::set?
<va>Удаляет все элементы из множества.
<v>Удаляет указанный элемент из множества.
<v>Удаляет дубликаты элементов из множества.
<v>Очищает память, занимаемую множеством.

<q>Какая структура данных лежит в основе std::unordered_set?
<va>Хеш-таблица
<v>Красно-черное дерево
<v>Связанный список
<v>Двоичное дерево поиска

<q>Что выведет следующий код?
#include <iostream>
#include <vector>
using namespace std;
int main() {
    vector<int> v = {1, 2, 3, 4, 5};
    v.insert(v.begin() + 2, 10);
    for (int i = 0; i < v.size(); i++) {
        cout << v[i] << " ";
    }
    return 0;
}
<va>1 2 10 3 4 5
<v>1 2 3 4 5 10
<v>10 1 2 3 4 5
<v>1 10 2 3 4 5

<q>Что выведет следующий код?
#include <iostream>
#include <set>
using namespace std;
int main() {
    set<int> s = {10, 20, 30, 40};
    s.erase(20);
    for (auto it = s.begin(); it != s.end(); ++it) {
        cout << *it << " ";
    }
    return 0;
}
<va>10 30 40
<v>10 20 30 40
<v>20 30 40
<v>Ошибка компиляции

<q>Что выведет следующий код?
#include <iostream>
#include <vector>
using namespace std;
int main() {
    vector<int> v = {1, 2, 3, 4, 5};
    cout << "Capacity before: " << v.capacity() << endl;
    v.push_back(6);
    cout << "Capacity after: " << v.capacity() << endl;
    return 0;
}
<va>Capacity before: 5\nCapacity after: 10
<v>Capacity before: 5\nCapacity after: 5
<v>Capacity before: 5\nCapacity after: 6
<v>Capacity before: 5\nCapacity after: 7

<q>Что выведет следующий код?
#include <iostream>
#include <vector>
using namespace std;
int main() {
    vector<int> v = {1, 2, 3};
    v.resize(5);
    for (int i = 0; i < v.size(); i++) {
        cout << v[i] << " ";
    }
    return 0;
}
<va>1 2 3 0 0
<v>1 2 3
<v>1 2 3 4 5
<v>Ошибка компиляции

<q>Что выведет следующий код?
#include <iostream>
#include <vector>
using namespace std;
int main() {
    vector<int> v = {10, 20, 30, 40};
    auto it = v.begin();
    v.insert(it + 2, 25);
    for (auto i : v) {
        cout << i << " ";
    }
    return 0;
}
<va>10 20 25 30 40
<v>10 25 20 30 40
<v>10 20 30 25 40
<v>10 20 30 40 25

<q>Что выведет следующий код?
#include <iostream>
#include <set>
using namespace std;
int main() {
    set<int> s = {5, 15, 25, 35};
    auto it = s.find(15);
    if (it != s.end()) {
        s.erase(it);
    }
    for (auto i : s) {
        cout << i << " ";
    }
    return 0;
}
<va>5 25 35
<v>5 15 25 35
<v>5 25
<v>5 15 35

<q>Что выведет следующий код?
#include <iostream>
#include <vector>
using namespace std;
int main() {
    vector<int> v = {1, 2, 3, 4, 5};
    v.clear();
    cout << v.size() << endl;
    return 0;
}
<va>0
<v>5
<v>1
<v>Ошибка компиляции

<q>Что выведет следующий код?
#include <iostream>
#include <vector>
using namespace std;
int main() {
    vector<int> v = {5, 10, 15};
    v.emplace(v.begin() + 1, 7);
    for (auto i : v) {
        cout << i << " ";
    }
    return 0;
}
<va>5 7 10 15
<v>5 10 7 15
<v>5 10 15 7
<v>5 7 10 15 7

<q>Что выведет следующий код?
#include <iostream>
#include <set>
using namespace std;
int main() {
    set<int> s = {10, 20, 30, 40};
    auto range = s.equal_range(20);
    for (auto it = range.first; it != range.second; ++it) {
        cout << *it << " ";
    }
    return 0;
}
<va>20
<v>10 20 30 40
<v>10 20
<v>30 40

<q>Что выведет следующий код?
#include <iostream>
#include <set>
using namespace std;
int main() {
    set<int> s = {10, 20, 30};
    s.emplace(25);
    for (auto i : s) {
        cout << i << " ";
    }
    return 0;
}
<va>10 20 25 30
<v>10 25 20 30
<v>10 20 30
<v>10 20 30 25

<q>Что выведет следующий код?
#include <iostream>
#include <set>
using namespace std;
int main() {
    set<int> s = {1, 2, 3, 4, 5};
    auto it = s.lower_bound(3);
    cout << *it << endl;
    return 0;
}
<va>3
<v>2
<v>4
<v>5
